package com.example.security;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import com.example.entity.User;
import com.example.repositoty.UserRepository;

@Configuration
public class JWTFilter extends OncePerRequestFilter{
	
	
	@Autowired
	private JWTUtil jwtUtil;
	
	@Autowired 
	private UserRepository userRepository;
	
	
	 @Override
	    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {

	        String authHeader = request.getHeader("Authorization");

	        if (authHeader != null && authHeader.startsWith("Bearer ")) {
	            String token = authHeader.substring(7);
	            String email = jwtUtil.extractUsername(token);

	            if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
	                User user = userRepository.findByEmail(email).orElse(null);

	                if (user != null) {
	                    UsernamePasswordAuthenticationToken authentication =
	                        new UsernamePasswordAuthenticationToken(user.getEmail(), null, Arrays.asList(new SimpleGrantedAuthority("ROLE_" + user.getRole().name())));
	                    SecurityContextHolder.getContext().setAuthentication(authentication);
	                }
	            }
	        }

	        filterChain.doFilter(request, response);
	    }

}





package com.example.security;

import java.util.Date;
import org.springframework.stereotype.Component;
import io.jsonwebtoken.*;

@Component
public class JWTUtil {
	
	private final String SECRET_KEY="zidio_secret_key";
	
	public String generateToken(String email,String role) {
		
		return Jwts.builder().
				setSubject(email).
				claim("role",role).
				setIssuedAt(new Date()).
				setExpiration(new Date(System.currentTimeMillis()+36000)).
				signWith(SignatureAlgorithm.HS256,SECRET_KEY).
				compact();
		
	}
	public String extractUsername(String token) {
        return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody().getSubject();
    }
	
	
//	public String extractEmail(String token) {
//		return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody().getSubject();
//		
//      
//    }
	
	
//	public Claims getClaims(String token) {
//		return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
//		
//	}
	
	
}




package com.example.security;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class SecurityConfig {
	
	
	@Autowired
	private JWTFilter jwtFilter;
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
//	@Bean
//	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
//		
//		http.csrf().disable()
//		.authorizeHttpRequests().
//		antMatchers("/api/auth/**").permitAll()
//		.anyRequest().authenticated()
//		.and()
//		.sessionManagement()
//		.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//		
//		return http.build();
//		
//	}
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeHttpRequests()
            .antMatchers("/api/auth/**").permitAll()
            .anyRequest().authenticated()
            .and()
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
	

}


